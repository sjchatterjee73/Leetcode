There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.



Example 1:

Input: rooms = [[1],[2],[3],[]]
Output: true
Explanation: 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we return true.
Example 2:

Input: rooms = [[1,3],[3,0,1],[2],[0]]
Output: false 
Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.





Solution:

1. Make a directed graph with source (index) and destination (room).

2. visit all nodes in DFS fashion, 

3. if there unvisited node remains - return false;

4. otherwise - return true;



class Solution {

    static class Nodes{

		int src;

		int dest;

		

		public Nodes(int src, int dest) {

			this.src = src;

			this.dest = dest;

		}

	}

    public boolean canVisitAllRooms(List<List<Integer>> inputs) {

        int max = Integer.MIN_VALUE;		

		for(List<Integer> items : inputs) {

			for(Integer i : items) {

				max = Math.max(i, max);				

			}

		}

        

        Map<Integer, List<Nodes>> graph = new HashMap<Integer, List<Nodes>>();

		boolean [] visited = new boolean[max+1];

		for(int i=0; i<max+1; i++) {

			graph.put(i, new ArrayList<>());

		}

		

		// insert into graph

		int index = 0;

		for(List<Integer> list: inputs) {

			insert(index++, list, graph);

		}

		

		// explore nodes

		dfs(graph, 0, visited);

        

        for(boolean f : visited){

            if(!f){

                return false;

            }

        }

        

        return true;

		

    }

    

    private void dfs(Map<Integer, List<Nodes>> graph, int source, boolean[] visited) {

		visited[source] = true;		

		List<Nodes> level = graph.get(source);

		

		for(Nodes n : level) {

			if(!visited[n.dest]) {

				dfs(graph, n.dest, visited);

			}

		}

		

	}

	private void insert(int index, List<Integer> list, Map<Integer, List<Nodes>> graph) {		

		for(Integer item : list) {

			graph.get(index).add(new Nodes(index, item));

		}

	}

}
